#+TITLE: Config
#+STARTUP: overview

* Todo
- Change image paste directory structure for org image download set so that it works in the same directory structure as logseq? see image green propulsion file [2021-12-13 Mon]
* Startup and load
#+begin_src emacs-lisp :tangle yes
;;; config.el -*- lexical-binding: t; -*-

;; Start the Emacs server from this instance so that all emacsclient calls are routed here.
;; (if (server-running-p ()) nil (server-start))

;; To reduce the risk of loading outdated byte code files, set load-prefer-newer
;; and enable auto-compile-on-load-mode as early as possible.
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)
(setq load-prefer-newer t)

;; These add load paths but don't load all files in them.
;; (add-load-path! "my/global")
;; (add-load-path! "modules")

(load! "my/global/functions.el")

;; Run programs in the Emacs buffer holding their source, seeing their output inline, interactively.
;; Better approach to loading?
(load! "~/.doom.d/modules/halp.el")

;; Use word wrap in all buffers that minor mode message-mode.
;; https://blog.jethro.dev/posts/migrating_to_doom_emacs/
(remove-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'message-mode-hook #'word-wrap-mode)

(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(setq mixed-pitch-variable-pitch-cursor nil)

(setq
  shell-file-name "/opt/homebrew/bin/fish"
  mac-right-command-modifier 'hyper
  trash-directory "~/.Trash"
  confirm-kill-emacs nil
    ;; Disable exit confirmation

  user-full-name "Gavin Hughes"
  user-mail-address "gavhug@gmail.com"

  doom-font (font-spec :family "DejaVu Sans Mono" :size 16)
  doom-variable-pitch-font (font-spec :family "DejaVu Serif" :size 18)
  doom-serif-font (font-spec :family "DejaVu Serif")

  doom-scratch-initial-major-mode 'org-mode
  undo-limit 80000000                         ; Raise undo-limit to 80Mb
  evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
  auto-save-default t                         ; Nobody likes to loose work, I certainly don't
  inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
  truncate-string-ellipsis "…"                ; Use unicode ellipsis
  global-visual-line-mode t                   ; Visual line navigation everywhere.

  ;; ispell-program-name "hunspell"
  display-line-numbers-type 'visual

  ;; Finder "put back" is not supported. If desired, instructions are here
  ;; https://christiantietze.de/posts/2021/06/emacs-trash-file-macos/
  delete-by-moving-to-trash t


  ;; https://github.com/jschaf/esup/issues/54
  ;; work around a bug where esup tries to step into the byte-compiled
  ;; version of `cl-lib', and fails horribly.
  esup-depth 0
  )

(setq ispell-personal-dictionary "~/.doom.d/aspell.en.pws")

(setq projectile-indexing-method 'native)
(add-to-list 'projectile-globally-ignored-file-suffixes ".org_archive")
;; (add-to-list 'projectile-globally-ignored-directories "*bak")
  ;; Ignores aren't working.  Why?  [2021-12-28 Tue]
  ;; https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile
(setq-default major-mode 'org-mode)
  ;; If set to ‘nil’, the major mode is taken from the previously current buffer.
(remove-hook 'text-mode-hook #'spell-fu-mode)
  ;; Focus on writing, not spelling.
(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  ;; Don't spread text across the entire screen.
(advice-add 'text-scale-adjust :after #'visual-fill-column-adjust)
(setq
  visual-fill-column-fringes-outside-margins nil
  visual-fill-column-center-text t
  visual-fill-column-width 100
)

;; Maximize frame at startup.
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

* My functions
** Buffers
#+begin_src emacs-lisp :tangle yes
(defun gh/clone-indirect-buffer-vertically ()
  (interactive)
  (clone-indirect-buffer nil 1)
  (+evil/window-move-right))
#+end_src
** Toggle theme
#+begin_src emacs-lisp :tangle yes
(defvar dark-theme  'doom-one)
(defvar light-theme 'doom-one-light)
(defun toggle-theme ()
  "Toggle between my light and dark themes."
  (interactive)
  (if (eq (car custom-enabled-themes) dark-theme)
      (load-theme light-theme)
    (load-theme dark-theme)))
#+end_src
:NOTES:
You could also try setting when the system inverts colors. This would get you started but needs to be changed for invert, not mode:
https://www.reddit.com/r/emacs/comments/hejsqm/is_there_a_way_to_detect_lightdark_mode_on_mac/
:END:
** Org
#+begin_src emacs-lisp :tangle yes
(defun gh/org-time-stamp-inactive ()
  (interactive)
  (org-insert-time-stamp (current-time) nil 1))
#+end_src
** Org Roam
#+begin_src emacs-lisp :tangle yes
(defun gh/org-open-journal ()
  (interactive)
  (org-roam-dailies-goto-today)
  (evil-goto-first-line)
  (search-forward "* #journal")
  (org-tree-to-indirect-buffer)
  (evil-goto-line)
  )
#+end_src
** Agenda
Simpler way of doing recursive search of org files:
https://stackoverflow.com/a/41969519/173162


[2022-05-23 Mon]
    Add the =People= directory to capture all assigned there along with agenda?
    In 1/1s, you really want to pull up the entire file, not just #personname tag.  The file should have other items of importance to discuss.

#+begin_src emacs-lisp :tangle no
(defun gh/set-org-agenda-all-files ()
  "Include all org files in org-agenda-files"
  (interactive)
     (setq org-agenda-files "")
     (setq
       org-agenda-files (sort (gh/agenda-file-filter (directory-files-recursively org-roam-directory "\\.org$")) #'string>)))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun gh/set-org-agenda-crowley-files ()
  "Include only Crowley files in org-agenda-files"
  (interactive)
     (setq org-agenda-files "")
     (setq org-agenda-files (append
                       (sort (gh/agenda-file-filter (directory-files-recursively (concat org-roam-directory "/pages") "\\.org$")) #'string>)
                       (sort (gh/agenda-file-filter (directory-files-recursively (concat org-roam-directory "/daily") "\\.org$")) #'string>)
                       )))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(("h" . "Pending + Name tag searches") ; describe prefix "h"
        ("hk" search "#pending")))

;; (setq
    ;; org-agenda-window-setup 'reorganize-frame
    ;; ;; (search category-keep)
    ;; org-agenda-show-future-repeats 'next ;; Shows only the first future repeat.
    ;; org-agenda-skip-deadline-if-done t
    ;; org-agenda-skip-scheduled-if-done t
    ;; org-agenda-skip-timestamp-if-done t
    ;; org-agenda-start-on-weekday 0
    ;; org-agenda-custom-commands
    ;;     '(("d" "Today's Tasks"
    ;;         ((agenda "" ((org-agenda-span 1)
    ;;                 (org-agenda-overriding-header "Today's Tasks")))))
    ;; org-agenda-custom-commands))
#+end_src
** Ledger
#+begin_src emacs-lisp :tangle yes
(defun gh/ledger-insert-date ()
  (interactive)
  (insert (format-time-string "%Y/%m/%d")))
#+end_src
** Experimental
https://github.com/hlissner/doom-emacs/issues/581
#+begin_src emacs-lisp :tangle no
(defun dlukes/ediff-doom-config (file)
  "ediff the current config with the examples in doom-emacs-dir

There are multiple config files, so FILE specifies which one to
diff.
"
  (interactive
    (list (read-file-name "Config file to diff: " doom-private-dir)))
  (let* ((stem (file-name-base file))
          (customized-file (format "%s.el" stem))
          (template-file-regex (format "^%s.example.el$" stem)))
    (ediff-files
      (concat doom-private-dir customized-file)
      (car (directory-files-recursively
             doom-emacs-dir
             template-file-regex
             nil
             (lambda (d) (not (string-prefix-p "." (file-name-nondirectory d)))))))))
#+end_src

* Global keymaps
- #idea Global keymaps use =s-=. Mode keymaps use =h-=.

** Cords used in MacOS
Don't use these.
#+begin_src
C-M-<return>    Magnet maximize window
C-M-<space>     Things quick capture
#+end_src

** Undefine chords
Chords that are:
1. Pre-defined but unused; or
2. Reassigned and undefined explicitly for clarity or to prevent conflicts.

#+begin_src emacs-lisp :tangle yes
(map!
 :n  "O"         'undefined ; evil-open-above
 :ni "C-d"       'undefined ; evil-scroll-down
     "M-d"       'undefined ; kill-word
     "M-z"       'undefined ; zap-to-char. Using SPC d f /char/
     "s-:"       'undefined ; iSpell
     "s-e"       'undefined ; isearch-yank-kill
     "C-SPC"     'undefined ; set-mark-command

     ; Using undo-fu package mapped for Mac consistency to to s-z and S-s-z.
     "C-/"       'undefined ; undo-fu-only-undo. When would I need this?
     "C-?"       'undefined ; undo-fu-only-redo. When would I need this?
                            ; This is assigned thru Maestro as "Open Recent"

 :leader ":"     'undefined ; M-x
 :leader "."     'undefined ; counsel-find-file. SPC ff
 :leader "f D"   'undefined ; doom/delete-this-file. SPC f d
 :leader "X"     'undefined
 :leader "b N"   'undefined
 :leader "u"     'undefined ;; Universal argument
 )
#+end_src

*** Items I'd like to add but have failed to get working.
Already have =C-a= for this. Return =C-h= to the vanilla help leader.
#+begin_src emacs-lisp :tangle no
 :i  "C-h"       'undefined ; org-beginning-of-line.
#+end_src

** Global chords
#+begin_src emacs-lisp :tangle yes
(map!
  "H-s"         (cmd! (find-file (expand-file-name "stack.org" org-roam-directory)))
  "H-c"         (cmd! (find-file "/Users/gavinhughes/.doom.d/config.org"))
  "H-\\"        'toggle-theme
  "H-y"         'doom/delete-this-file
  "H-j"         'gh/org-open-journal

   ;; Movement
   :n "$"                  'end-of-visual-line
   :n "j"                  'evil-next-visual-line
   :n "k"                  'evil-previous-visual-line
      "M-<left>"           'backward-word
      "M-<right>"          'forward-word
      "M-s-l"              'avy-goto-char
      "M-s-;"              'avy-goto-char-2
   :i "s-l" "<escape>la" ;; Step forward over single chars without leaving insert mode
   :i "s-h" "<escape>ha" ;; Step back over...
   :i "s-S" "<escape>0i" ;; Jump to col 0. Useful in org mode

   :i "M-o"  'evil-execute-in-normal-state

  :ni "M-."                'better-jumper-jump-forward
  :ni "M-,"                'better-jumper-jump-backward

  ;; Special characters
  :i "M--" "–" ;; m-dash. Consistent with Mac.

  ;; Buffers
  "s-n"            (cmd! (evil-buffer-new 1 nil))
  "s-k"            'kill-current-buffer
  "M-s-k"          'kill-buffer-and-window
  "s-,"            'ivy-switch-buffer
  "M-s-]"          'next-buffer
  "M-s-["          'previous-buffer
  "s-p"            'ps-print-buffer-with-confirmation
  "s-;"            'org-roam-node-find
  "M-s-s"          (cmd! (save-buffer) (kill-current-buffer))

  ;; Windows
  "s-'"            'evil-window-next
  "s-\""           'evil-window-prev
  "C-S-M-<return>" 'toggle-frame-fullscreen
  ;; Doesn't work in emacs-mac. All frames are maximized.
  ;; "C-M-<return>" 'toggle-frame-maximized

  ;; Workspaces.
  ;; :n assignment is in the package. Add :i.
  ;; [2022-05-22 Sun] Just pulled out the :ni to make this work in the agenda. Any issues??
  "s-1"        '+workspace/switch-to-0
  "s-2"        '+workspace/switch-to-1
  "s-3"        '+workspace/switch-to-2
  "s-4"        '+workspace/switch-to-3

  ;; Other
  :ni "s-O"       'evil-open-above
      "s-<up>"    '+evil/insert-newline-above
      "s-<down>"  '+evil/insert-newline-below
      ;; "M-<return>" '+evil/insert-newline-below
      "M-<return>"  '+default/newline-below
  ;; was "H-<return>" with the following note:
   ;; todo. write about the reason for this. Has to do with org mode conflict 's-<return>'
  ;; :ni "s-<return>" (cmd! (message "Use <H-return>"))
  :niv "C-u"       'universal-argument

  ;; Make `$` behave same as in :normal.
  :v  "$"         (cmd! (evil-end-of-line) (evil-backward-char) (evil-forward-char))

  ;; Leaders – place last, otherwise errors.
  :leader "f m"   'doom/move-this-file
  :leader "b n"   'rename-buffer
  :leader "b c"   'gh/clone-indirect-buffer-vertically
  :leader "j d"   'dired-jump
  :leader "<"     '+ivy/switch-workspace-buffer
  :leader ","     'ivy-switch-buffer
  :leader "SPC"   '+ivy/projectile-find-file
  :leader "f d"   'doom/delete-this-file

  ;; Git
  :leader "g f d"   'magit-diff-buffer-file

  ;; `m` Mac OS
  :leader "m m d"   '+macos/open-in-default-program
  :leader "m m o"   'reveal-in-osx-finder

  ;; `t` Toggle
  :leader "t v"   'visual-fill-column-mode
)
#+end_src


* Org Mode
** Config

- Is there a [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#usingloading-local-packages][better way]] to load using packages.el?
#+begin_src emacs-lisp :tangle no
(add-load-path! "my/org-mode")
(require 'org-mac-link)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
  org-directory "~/iCloud/OrgNotes/"
  org-archive-location "archive.org::* From %s"
  org-attach-id-dir (concat org-directory "attachments/")
  org-ellipsis " ▼ "
  org-cycle-separator-lines 3
  org-special-ctrl-k t
  ;; Not working 7/13/21
  org-ctrl-k-protect-subtree t
  org-blank-before-new-entry '((heading . nil)
                               (plain-list-item . nil))
  org-appear-trigger 'on-change)
    ;; Other options: https://github.com/awth13/org-appear/blob/master/org-appear.el
#+end_src

Save org buffers every 5 seconds of idle time. Necessary for Logseq. Without it, I would jump over to Logseq and make edits without first writing changes in the org file resulting in a fork.
#+begin_src emacs-lisp :tangle yes
(setq auto-save-timeout 30)
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+end_src
** Appearance
Make text easier to read by increasing space between lines.
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda () (setq line-spacing 10)))
#+end_src

Fonts
#+begin_src emacs-lisp :tangle yes
(setq
    org-priority-faces '((?A . (:foreground "dim grey"))
                        (?B . (:foreground "dim grey"))
                        (?C . (:foreground "dim grey")))
    org-todo-keyword-faces
    '(
            ("DOING" :foreground "grey40" :weight bold :family "DejaVu Sans Mono")
            ("ASSIGNED" :foreground "grey40" :weight bold :family "DejaVu Sans Mono")
            ("TODO" :foreground "dim grey" :weight bold :family "DejaVu Sans Mono")
            ("WIP" :foreground "dim grey" :weight bold :family "DejaVu Sans Mono")
            ("DONE" :foreground "grey25" :weight bold :family "DejaVu Sans Mono")
            ("PENDING" :foreground "dim grey" :weight bold :family "DejaVu Sans Mono")
            ("PAUSED" :foreground "dim grey" :weight bold :family "DejaVu Sans Mono")
            ("[ ]" :foreground "dim grey")
            ("[X]" :foreground "grey25")
            ("CANCELLED" :foreground "grey25" :weight bold :family "DejaVu Sans Mono"))
   )
#+end_src

#+begin_src emacs-lisp :tangle yes
(custom-theme-set-faces
  'user
  ;; Use only two alternating colors for heading.
  '(org-level-1 ((t (:foreground "systemTealColor" :height 1.15))))
  '(org-level-2 ((t (:weight bold :foreground "systemBrownColor"))))
  '(org-level-3 ((t (:foreground "systemTealColor"))))
  '(org-level-4 ((t (:foreground "systemBrownColor"))))
  '(org-level-5 ((t (:foreground "systemTealColor"))))
  '(org-level-6 ((t (:foreground "systemBrownColor"))))

  ;; Remove bold from links.
  ;; "pink1" is here in search of a solution that would undefine the color on a link
  ;; and inherit.
  '(link ((t (:weight normal :underline "grey37" :foreground "pink1")))))
#+end_src
** Latex
https://www.fromkk.com/posts/preview-latex-in-org-mode-with-emacs-in-macos/
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'org-fragtog-mode)
    ;; Automatically toggle LaTeX fragment previews as cursor enters and exits
(setq
  org-format-latex-options '(:scale 2.0))
#+end_src

** Keymaps
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
  :ni "C-<return>"  (cmd! (evil-org-org-insert-heading-respect-content-below))
  :ni "s-<return>"         (cmd! (+org/insert-item-below 1))
  :ni "S-s-<return>"     (cmd! (+org/insert-item-above 1))
  :ni "M-s-<return>"       (cmd! (org-insert-subheading 1) (evil-insert 1))
  ;; Insert a heading while currently working a bullet list
  :nie "C-M-s-<return>"     (cmd! (org-previous-visible-heading 1) (+org/insert-item-below 1))



  "M-s-SPC"            'org-capture

  "H-n"                'org-next-visible-heading
  "H-p"                'org-previous-visible-heading
  "H-r"                (cmd! (+org/refile-to-file nil "daily.org"))
  "H-R"                '+org/refile-to-file
  ;; "H-a"                'org-archive-subtree
  "H-a"                'gh/open-or-pop-to-agenda
  "C-<"                'org-do-promote
  "C->"                'org-do-demote
  ;; "s-."                'org-shiftright
  ;; "s->"                'org-shiftleft
  ;; Previously, "H-l"                "C-u C-u C-c C-x C-l" ;; Preview all latex
  "H-L"                "C-u C-c C-x C-l" ;; Un-preview all latex
  "C-M-y"              'org-download-screenshot
  "C-M-S-y"            'org-download-yank

  ;; Quickly get done Todo states
  ;; This is anti-pattern but efficient
  "H-l"  "C-c C-t d" ; DOING
  "H-k"  "C-c C-t o" ; DONE
  ;; "H-'"

  :niv "s-j"        'org-todo

  :leader "i d"     'gh/org-time-stamp-inactive
  :leader "m m S"   'gh/yank-safari-front-url
  :leader "m m s"   'gh/org-insert-safari-front-link

  ;; :leader "a a"   'gh/set-org-agenda-all-files
  ;; :leader "a c"   'gh/set-org-agenda-crowley-files
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; (after! org-roam
;;         :config
;;         (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))

;; Not working yet. And will probably be in the next release of v2
;; (defun org-roam-node-insert-immediate (arg &rest args)
;;   (interactive "p")
;;   (let ((args (cons arg args))
;;         (org-roam-capture-templates (list (append (car org-roam-capture-templates)
;;                                                   '(:immediate-finish t)))))
;;     (apply #'org-roam-node-insert args)))
#+end_src

** Tags
(setq
  org-use-tag-inheritance nil
  org-agenda-use-tag-inheritance nil
  org-tag-alist '((:startgrouptag)
                  ("Interaction")
                  (:grouptags)
                  ("ia")
                  ("{ia#.+}")
                  (:endgrouptag))
 )
#+end_src

** More
;; https://www.orgroam.com/manual.html#Org_002droam-Protocol
;; Installed. How to use it? [2021-12-13 Mon]
;; (require 'org-roam-protocol)

#+begin_src emacs-lisp :tangle yes
(use-package! org-mac-link
  ;; Current version of Outlook doesn't support direct links to messages.
    :after org
    :config
    (setq org-mac-grab-Acrobat-app-p nil) ; Disable grabbing from Adobe Acrobat
    (setq org-mac-grab-devonthink-app-p nil) ; Disable grabbinb from DevonThink
    (map! :map org-mode-map          "C-c g"  #'org-mac-grab-link))

;; Logseq
;; (setq org-logseq-dir "~/Library/Mobile Documents/com~apple~CloudDocs/OrgNotes/Roam/")
;; (setq org-agenda-files (directory-files "~/iCloud/OrgNotes" nil "."));;)"~/iCloud/OrgNotes/")
;; (setq org-agenda-inhibit-startup t)
;; (setq org-agenda-dim-blocked-tasks nil)

;; (use-package! org-roam-bibtex
;;   :after org-roam
;;   :config
;;   (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here

;; (setq org-roam-capture-templates
;;       '(;; ... other templates
;;         ;; bibliography note template
;;         ("r" "bibliography reference" plain "%?"
;;         :target
;;         (file+head "references/${citekey}.org" "#+title: ${title}\n")
;;         :unnarrowed t)))
#+end_src

** Literate config
The Doom +literate module will tangle automatically on save. Need to turn this off because:
1. My org is configured to autosave to avoid losing work when using Roam with Logseq;
2. Tangle on autosave will often result in config.el in a broken state during config.org edits.

#+begin_src emacs-lisp :tangle yes
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

** File associations
This was working before going literate. Not sure it's even needed.
Open pdfs with emacs.

#+begin_src emacs-lisp :tangle no
;; (setq org-file-apps (delq (assoc "\\.pdf\\'" org-file-apps) org-file-apps))
;; (setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs)
#+end_src

*** TODO This needs to work in Dired, not Orgs
Better would be PDF Expert. How to do that?
Also want to be able to open Numbers files, currently this dives into the bundle.


** Images
#+begin_src emacs-lisp :tangle no
  ;; org-startup-with-inline-images 0
  ;; Can be set per file with #+STARTUP: ‘inlineimages’ or ‘noinlineimages’
#+end_src

 org-download is not great.
https://github.com/abo-abo/org-download/blob/master/org-download.el

Good guide:
https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/
 Using the 'attach method, files are inserted in the org-attach-id directory under the file property.
 Limitations:
 - Images will not insert unless under a heading.
#+begin_src emacs-lisp :tangle yes
(require 'org-download)
(after! org
  (setq
    org-download-method 'attach
    org-download-timestamp "%Y%m%d-%H%M%S_"
    org-image-actual-width 300
    org-download-delete-image-after-download 1 ; Delete temp image after download
    org-download-screenshot-method "/opt/homebrew/bin/pngpaste %s"
    org-download-annotate-function #'gh/dont-annotate) ; Don't insert any property info above the link.
  )
(defun gh/dont-annotate (link) "")
#+end_src

** More
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'org-appear-mode)
(after! org
  ;; (load-directory! "my/org-mode")
 (vi-tilde-fringe-mode -1)
 (setq
    company-idle-delay nil ;; no autocompletion
    org-hide-emphasis-markers t
    spell-fu-mode nil

    org-todo-keywords
    '(
        (sequence
        "TODO(u)"
        "[ ](c)"
        "|"
        "DOING(d)"
        "ASSIGNED(s)"
        "DONE(o)"
        "[X](x)"
        "CANCELLED(l)"
        )
        (sequence
        "WIP(w)"
        "PENDING(p)"
        "PAUSED(a)"
        "|"
      ))))
#+end_src

* Roam
** Config
#+begin_src emacs-lisp :tangle yes
(setq org-roam-v2-ack t
      org-roam-directory "~/Library/Mobile Documents/com~apple~CloudDocs/OrgNotes/Roam"
      org-roam-db-autosync-mode t

      org-roam-capture-templates '(("d" "default" plain "%?"
                                      :target (file+head "${slug}.org"
                                                         "#+TITLE:   ${title}\n#+STARTUP: overview\n–")
                                      :unnarrowed t))
      org-roam-dailies-directory "daily")
#+end_src

** Daily Template
#+begin_src emacs-lisp :tangle yes
(setq org-roam-dailies-capture-templates '(("d" "default" entry
                                            "* %?"
                                        :target (file+head
"%<%Y-%m-%d>.org"
"#+TITLE: %<%A, %-m/%-d/%y>
#+STARTUP: overview
#+TAGS:
:RESOURCES:
- Record meetings.

[[id:08adbfaa-a334-4408-b0e2-b93a0476e0b4][Up and Out]]:
[[id:3ee42355-9ee2-4fd7-9a08-2d68bea5575c][Public Speaking]]:
Dinner invites:

[[https://crowley-cpt.deltekenterprise.com/cpweb/cploginform.htm?system=CROWLEYCONFIG][Timesheet]]
[[elisp:(counsel-locate \"Assigned Tasks\")][Assigned Tasks]]
[[id:74c82416-8fbb-4eed-9ae0-fe774507a7e3][Stack]]
[[elisp:(counsel-locate \"Monthly Maritime Solutions Report\")][Monthly Report]]
[[id:133b80ef-ce99-4b70-b2d4-49e62469b2a2][Crowley]]

[[id:c0bf71fa-f63e-46d5-9ae3-1d92e6a1b15c][Journal]]
[[elisp:(counsel-locate \"Sleep-drink Log\")][Sleep Log]]
[[elisp:(counsel-locate \"Goal Tracker\")][Goals]]
[[id:9f575fc8-6b38-4e33-920d-20940860d924][Self]]
:END:
"))))
#+end_src
** Keymaps
*** In Roam mode
#+begin_src emacs-lisp :tangle yes
(map! :map org-roam-mode-map
    ;; Add :n to override assignment in +workspaces
        "<f7>"        'org-tags-view
        "<f9>"        'org-agenda-list

  "s-I"                'org-roam-node-insert
        ;; `r` org-roam
    :leader "r r"     'org-roam-node-find
    :leader "r i"     'org-roam-node-insert
    :leader "r b"     'org-roam-buffer-toggle
)
#+end_src

*** Any mode.
#+begin_src emacs-lisp :tangle yes
(map!
    "H-,"         'org-roam-dailies-goto-today
    "H-."         (cmd! (find-file (expand-file-name "daily.org"
                        (expand-file-name org-roam-dailies-directory org-roam-directory))))
    "H-d"         'org-roam-dailies-goto-date
    "H-["         'org-roam-dailies-goto-previous-note
    "H-]"         'org-roam-dailies-goto-next-note
)
#+end_src
* Other Modes
** Haskell
#+begin_src emacs-lisp :tangle yes
(map! :map haskell-mode-map
 :i "M-s-;" (cmd! (insert "-> "))
 :i "M-s-:" (cmd! (insert "<- "))
 )
 #+end_src

** Elixir and Phoenix
#+begin_src emacs-lisp :tangle yes
(map! :map elixir-mode-map
 :i "M-s-;" (cmd! (insert "-> "))
 :i "M-s-:" (cmd! (insert "<- "))
 :i "s-:"   (cmd! (insert "=> "))
 :i "M-s-." (cmd! (insert "|> "))
 )
#+end_src

** Markdown
#+begin_src emacs-lisp :tangle yes
(map! :map markdown-mode-map
    ;; Make m-dash behavior consistent with Mac.
    "M--" 'undefine

    "M-s-<return>"  'markdown-insert-list-item
 :i "M--" "–"
;; Errors on markdown-insert-list-item
;;  :ni   "s-<return>" (cmd! (evil-open-below 1) (markdown-insert-list-item))
 )
#+end_src


** Eww
#+begin_src emacs-lisp :tangle yes
(after! eww
  ;; (load-directory! "my/eww-mode")
  ;; This has global effect.  How to limit to just eww mode?
  ;; (visual-fill-column-mode t)
  (map! :map eww-mode-map
        "I" #'my/eww-toggle-images
        "M-<return>" 'my-eww-open-in-new-window
        "M-s-[" 'eww-back-url
        "M-s-]" 'eww-forward-url)
        ;; "<s-mouse-1>" 'my-eww-open-in-new-window
  )
#+end_src
** Ledger
#+begin_src emacs-lisp :tangle yes
(map! :map ledger-mode-map
      "C-c C-l" 'ledger-mode-clean-buffer
      "C-c C-i" 'gh/ledger-insert-date)
#+end_src

** Unused
#+begin_src emacs-lisp :tangle no
(map! :map inferior-ess-mode
  :n "M-j" "<- "
  )
#+end_src

